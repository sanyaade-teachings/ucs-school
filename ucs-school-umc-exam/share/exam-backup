#!/usr/bin/python2.7 -u
#
# Copyright 2019-2024 Univention GmbH
#
# http://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <http://www.gnu.org/licenses/>.
#

import logging

from ucsschool.lib.models.utils import get_stream_handler
from univention.config_registry import ConfigRegistry
from univention.management.console.modules.schoolexam import util


def main():
    logger = logging.getLogger(__name__)
    logger.setLevel("INFO")
    logger.addHandler(get_stream_handler("INFO"))

    logger.info("Starting exam backup process.")

    ucr = ConfigRegistry()
    ucr.load()

    compress = ucr.is_true("ucsschool/exam/backup/compress", True)
    try:
        limit = max((int(ucr.get("ucsschool/exam/backup/limit", 40)), 1))
    except ValueError:
        logger.error(
            "ucsschool/exam/backup/limit does not contain a valid number. Falling back to default"
        )
        limit = 40

    util.distribution.POSTFIX_DATADIR_SENDER_PROJECT_SUFFIX = "-Zwischenergebnisse"

    for project in util.distribution.Project.list(only_distributed=True):
        if project.num_results < limit:
            project.collect(readOnly=True, compress=compress)
        else:
            logger.warning(
                "Results for %s were not collected. The limit has been reached.", project.name
            )


if __name__ == "__main__":
    main()
